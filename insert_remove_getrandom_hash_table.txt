#include<stdio.h>
#include <stdlib.h>//required to use 'rand()'
#include <time.h>//required to use 'srand(time(NULL))'
#include<stdbool.h>
#include <unistd.h>

typedef struct _llist{
    int value;
    struct _llist *next;
} llist;

llist hash_tbl[10];

bool insert_val(int val);
bool remove_val(int val);
int getRandom();

bool insert_val(int val) {
  int key = val%10;
  llist* temp = NULL;
  llist* node = NULL;
  
  temp = &hash_tbl[key];
  
  if(temp->next == NULL && temp->value == 0) {
      temp->value = val;
      temp->next = NULL;
      printf("Inserted Ist value: val=%d key=%d\n", val, key);
      return true;
  }
  while(temp->next) {
      if(temp->value == val) {
          printf("Value already present\n");
          return false;
      }
      temp=temp->next;
  }
  if(temp->next == NULL) {
    node = (llist *)malloc(sizeof(llist));
    node->value = val;
    node->next = NULL;
    temp->next = node;
    printf("Newly inserted value: val=%d key=%d\n", val, key);
  }
  return true;
}

bool remove_val(int val)
{
    int key = val%10;
    llist* prev = NULL;
    llist* curr = NULL;
    bool found = false;
    
    prev = &hash_tbl[key];
    curr = prev->next;
    
    if(prev->value == val){
        hash_tbl[key].value = 0;
        printf("Removed 1st value: val=%d key=%d\n", val, key);
        return true;
    }
    while(curr) {
        if(curr->value == val) {
            prev->next = curr->next;
            free(curr);
            printf("Removed value: val=%d key=%d\n", val, key);
            return true;
        }
        printf("Existing value: val=%d key=%d\n", curr->value, key);
        curr=curr->next;
    }
    printf("Value %d not found in the set\n", val);
    return false;
}

int getRandom()
{
    int val;
    int key;
    bool found = false;
    llist* temp = NULL;
    int retry_cnt = 0;
    
    while (!found && retry_cnt < 10) {
        srand(time(NULL));//required for "randomness"
        val = rand()%8 + 1;//generate a number 1-8
     
        printf("Random value = %d\n",val);
        key = val%10;
        temp = &hash_tbl[key];
        while(temp) {
            if(temp->value == val){
                found = true;
                return temp->value;
            }
            temp = temp->next;
        }
        sleep(2);
        retry_cnt++;
    }
    return -1;
}

int main() {
    
   int i, num = 0;

   for(i=0; i<10 ; i++) {   
        hash_tbl[i].value = 0;
        hash_tbl[i].next = NULL;
   }
   insert_val(1);
   insert_val(3);
   insert_val(6);
   insert_val(8);
   insert_val(13);
   remove_val(6);
   remove_val(63);
   num = getRandom();
   if(num == -1)
      printf("Exceeded retry count\n");
   else
      printf("Random value received = %d\n",num);
}


